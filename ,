#!/bin/sh

# check if is sourced
if [ "$0" = "," ]; then
    if ! which , >/dev/null; then
        echo 'remote-exec: File , not found in PATH or is hidden' >&2
        return
    fi
    if [ "$#" -eq 1 ]; then
        if SOURCED=MOUNT command , "$1"; then
            cd "$1"
            echo 'remote-exec: Mount succeed, current pwd:' >&2
            pwd >&2
        fi
    elif [ "$#" -ge 2 ]; then
        echo 'remote-exec: Too many arguments' >&2
        return
    else
        OWD="$PWD"
        cd /
        if RMT_RESULT="$(SOURCED=UMOUNT command , "$OWD")"; then
            cd "$RMT_RESULT"
            echo 'remote-exec: Unmount succeed, current pwd:' >&2
            pwd >&2
        else
            cd "$OWD"
        fi
    fi
    unset RMT_RESULT
    return
fi

set -e

if [ -n "$SOURCED" ]; then
    cd "$1"
fi

REL=""
WD="$PWD"
while true; do
    OWD="$PWD"
    if [ -f .rmt-config ]; then
        . "$PWD/.rmt-config"
        break
    else
        REL="$(basename "$OWD")/$REL"
        cd ..
        if [ "$PWD" = "$OWD" ]; then
            echo 'remote-exec: .rmt-config not found' >&2
            exit 3
        fi
    fi
done
OWD="$(realpath "$OWD")"

cd "$WD"

if [ -z "$RMT_HOST" ]; then
    echo 'remote-exec: RMT_HOST not found' >&2
    exit 2
fi
if [ -z "$RMT_SSH" ]; then
    RMT_SSH="ssh -Y -t"
fi
if [ -z "$RMT_SSHFS" ]; then
    RMT_SSHFS="sshfs"
fi
if [ -z "$RMT_RDIR" ]; then
    RMT_RDIR=".rmt"
fi

# check if already mounted

RD="$RMT_RDIR/$(printf '%s' "$OWD" | sha1sum | cut -d ' ' -f 1)"
if mount | grep -qF " on $OWD type fuse.sshfs"; then
    if [ "$SOURCED" = "MOUNT" ]; then
        echo "remote-exec: WARNING: $OWD is already mounted" >&2
        exit 4
    elif [ "$SOURCED" = "UMOUNT" ]; then
        cd /
        echo "remote-exec: Unmounting $OWD" >&2
        umount "$OWD"
        echo "$OWD/.."
        exit 0
    fi
else
    if [ "$SOURCED" = "UMOUNT" ]; then
        echo "remote-exec: WARNING: $OWD is already unmounted" >&2
        exit 4
    fi
    echo "remote-exec: Creating remote dir $RD" >&2
    ssh "$RMT_HOST" mkdir -p "$RD"
    echo "remote-exec: Mount remote dir to $OWD by sshfs" >&2
    T="$(realpath "$(mktemp)")"
    finish() {
        rm -f "$T"
    }
    trap finish EXIT
    cat "$OWD/.rmt-config" >"$T"
    $RMT_SSHFS "$RMT_HOST:$RD" "$OWD"
    echo "remote-exec: Restore $OWD/.rmt-config" >&2
    echo "### WARNING: DO NOT EDIT THIS FILE ###" >"$OWD/.rmt-config"
    if [ -z "$RMT_RSHELL" ]; then
        printf "remote-exec: Detecting login shell ... " >&2
        RMT_RSHELL="$(ssh "$RMT_HOST" echo '$SHELL')"
        echo "$RMT_RSHELL" >&2
        echo "RMT_RSHELL=$RMT_RSHELL" >>"$OWD/.rmt-config"
    fi
    cat "$T" >>"$OWD/.rmt-config"
    if [ "$SOURCED" = "MOUNT" ]; then
        exit 0
    fi
    echo 'remote-exec: WARNING: You may need to execute "cd ."' >&2
fi

CMD="/usr/bin/env -C $(/usr/bin/printf '%q' "$RD/$REL") $RMT_RENV"

if [ "$#" -eq 0 ]; then
    CMD="$CMD $(/usr/bin/printf '%q' "$RMT_RSHELL")"
else
    CMD="$CMD$(/usr/bin/printf ' %q' "$@")"
fi

echo "remote-exec: $RMT_SSH -Y $RMT_HOST /bin/sh -c $(/usr/bin/printf '%q' "$CMD")" >&2
exec $RMT_SSH "$RMT_HOST" /bin/sh -c "$(/usr/bin/printf '%q' "$CMD")"
